// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid()) // Unique identifier
  name          String?
  email         String    @unique
  description   String?
  image         String?
  emailVerified DateTime?
  userType      UserType? // Enum: 'brand' or 'individual'
  sessions      Session[] // One-to-many relationship with Session
  accounts      Account[] // One-to-many relationship with Account
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  Campaign Campaign[]
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String // Foreign key to User
  user         User     @relation(fields: [userId], references: [id])
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  refresh_token_expires_in Int?
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model NFT {
  id          String   @id @default(cuid()) // Unique identifier
  mintAddress String
  metadata    String
  description String
  imageUrl    String
  name        String
  symbol      String
  campaign    Campaign @relation(fields: [campaignId], references: [id])
  campaignId  String // Foreign key to the Campaign table
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Campaign {
  id          String   @id @default(cuid()) // Unique identifier
  name        String // Campaign name
  description String
  startDate   DateTime
  EndDate     DateTime
  totalNFTs   Int // Total number of NFTs in the campaign
  nfts        NFT[] // One-to-many relationship with NFT
  owner       User     @relation(fields: [ownerId], references: [id])
  ownerId     String // Foreign key to the User table
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Enum for user type
enum UserType {
  BRAND
  INDIVIDUAL
}
